import streamlit as st
import pandas as pd
from sqlalchemy import create_engine, text
from openai import OpenAI
from datetime import datetime
import pytz
import re
from typing import Optional, Dict, List
import tempfile

# -----------------------------
# CONFIGURATION
# -----------------------------
st.set_page_config(page_title="🕋 Hajj Chatbot", page_icon="🕋", layout="wide")

# -----------------------------
# TRANSLATION FUNCTION (shortened for brevity)
# -----------------------------
def t(key, lang="English"):
    if lang == "العربية":
        placeholders = {"input_placeholder": "اكتب سؤالك هنا... 💬", "voice_assistant": "مساعد الصوت للحج"}
    else:
        placeholders = {"input_placeholder": "Ask your question here... 💬", "voice_assistant": "Voice Assistant"}
    return placeholders.get(key, key)

# -----------------------------
# SETUP
# -----------------------------
def get_time():
    return datetime.now(pytz.timezone("Asia/Riyadh")).timestamp()

engine = create_engine("sqlite:///hajj_companies.db")
client = OpenAI(api_key=st.secrets.get("key"))

if "lang" not in st.session_state:
    st.session_state.lang = "English"
if "chat" not in st.session_state:
    st.session_state.chat = [{"role": "assistant", "content": "Welcome! 👋 Ask me anything about Hajj companies."}]
if "show_voice" not in st.session_state:
    st.session_state.show_voice = False

# -----------------------------
# CSS (modern look + mic beside input)
# -----------------------------
st.markdown("""
<style>
    body { font-family: 'Inter', sans-serif; }
    .main { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); }
    .header { text-align:center; padding:2rem; background:rgba(255,255,255,0.9);
              border-radius:20px; margin-bottom:2rem; }
    .header h1 { color:#667eea; margin:0; }
    .chat-box { background:white; border-radius:20px; padding:1.5rem; box-shadow:0 4px 20px rgba(0,0,0,0.1); }
    .mic-inline {
        position: fixed;
        bottom: 60px;
        right: 80px;
        background: linear-gradient(135deg,#667eea 0%,#764ba2 100%);
        border:none; border-radius:50%;
        width:45px; height:45px;
        display:flex; align-items:center; justify-content:center;
        color:white; font-size:1.3rem;
        box-shadow:0 3px 10px rgba(102,126,234,0.4);
        cursor:pointer;
        transition: all 0.3s ease;
        z-index:1000;
    }
    .mic-inline:hover { transform: scale(1.1); }
</style>
""", unsafe_allow_html=True)

# -----------------------------
# HEADER
# -----------------------------
st.markdown("<div class='header'><h1>🕋 Hajj Data Intelligence</h1><p>Ask anything about authorized Hajj agencies</p></div>", unsafe_allow_html=True)

# -----------------------------
# SHOW CHAT HISTORY
# -----------------------------
for msg in st.session_state.chat:
    with st.chat_message(msg["role"]):
        st.markdown(msg["content"])

# -----------------------------
# USER INPUT
# -----------------------------
user_input = st.chat_input(t("input_placeholder", st.session_state.lang))

# 🎤 Microphone button beside input
st.markdown("""
<button class="mic-inline" onclick="window.location.reload();" title="Voice Assistant">🎤</button>
""", unsafe_allow_html=True)

if user_input:
    st.session_state.chat.append({"role": "user", "content": user_input})
    with st.chat_message("user"):
        st.markdown(user_input)
    with st.chat_message("assistant"):
        st.markdown("🤔 Thinking...")
        st.session_state.chat.append({"role": "assistant", "content": "Here’s what I found about your question!"})

# -----------------------------
# VOICE INTERFACE
# -----------------------------
if st.session_state.show_voice:
    st.markdown("<div style='background:white;border-radius:20px;padding:2rem;text-align:center;'>", unsafe_allow_html=True)
    st.markdown(f"<h2 style='color:#667eea;'>🎤 {t('voice_assistant', st.session_state.lang)}</h2>", unsafe_allow_html=True)

    st.markdown("<div style='font-size:4rem;'>🎧</div>", unsafe_allow_html=True)
    st.markdown("Click below to record or upload your voice.")

    audio_file = st.file_uploader("🎙 Upload your voice", type=["wav", "mp3", "m4a", "ogg"])
    if audio_file:
        st.audio(audio_file)
        with st.spinner("Converting speech to text..."):
            try:
                transcription = client.audio.transcriptions.create(
                    model="whisper-1",
                    file=audio_file,
                    language="ar" if st.session_state.lang == "العربية" else "en"
                )
                text_out = transcription.text
                st.success("✅ Transcription successful!")
                st.info(f"🗣️ Text: {text_out}")
            except Exception as e:
                st.error(f"❌ Error: {e}")

    st.markdown("<hr>", unsafe_allow_html=True)
    st.markdown("<h3 style='color:#667eea;'>🔊 Listen to Response</h3>", unsafe_allow_html=True)
    if st.session_state.chat and st.session_state.chat[-1]["role"] == "assistant":
        response_text = st.session_state.chat[-1]["content"]
        if st.button("🎧 Listen"):
            with st.spinner("Generating audio..."):
                try:
                    tts = client.audio.speech.create(model="tts-1", voice="alloy", input=response_text[:400])
                    with tempfile.NamedTemporaryFile(delete=False, suffix=".mp3") as tmp:
                        tmp.write(tts.content)
                        st.audio(tmp.name)
                except Exception as e:
                    st.error(f"❌ Audio error: {e}")
    st.markdown("</div>", unsafe_allow_html=True)
