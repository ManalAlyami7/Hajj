import streamlit as st
import pandas as pd
from sqlalchemy import create_engine, text
from openai import OpenAI
from datetime import datetime
import pytz
import re
from typing import Optional, Dict, List
import base64
import tempfile
import os

# -----------------------------
# TRANSLATIONS DICTIONARY
# -----------------------------
TRANSLATIONS = {
    "English": {
        # Header
        "page_title": "Hajj Chatbot",
        "main_title": "Hajj Data Intelligence",
        "subtitle": "Ask anything about Hajj companies worldwide • AI-powered • Real-time data",
        
        # Sidebar
        "assistant_title": "🕋 Hajj Assistant",
        "assistant_subtitle": "Your AI-powered guide",
        "language_title": "🌐 language",
        "stats_title": "📊 Live Statistics",
        "examples_title": "💡 Quick Examples",
        "clear_chat": "🧹 Clear Chat History",
        "features_title": "ℹ️ Features",
        
        # Stats
        "total_agencies": "Total Agencies",
        "authorized": "Authorized",
        "countries": "Countries",
        "cities": "Cities",
        
        # Examples
        "ex_all_auth": "🔍 All authorized companies",
        "ex_all_auth_q": "Show me all authorized Hajj companies",
        "ex_saudi": "🇸🇦 Companies in Saudi Arabia",
        "ex_saudi_q": "List companies in Saudi Arabia",
        "ex_by_country": "📊 Agencies by country",
        "ex_by_country_q": "How many agencies are in each country?",
        "ex_emails": "📧 Companies with emails",
        "ex_emails_q": "Find companies with email addresses",
        
        # Features
        "feat_ai": "AI-Powered Search",
        "feat_ai_desc": "Natural language queries",
        "feat_multilingual": "Multilingual",
        "feat_multilingual_desc": "Arabic & English support",
        "feat_viz": "Data Visualization",
        "feat_viz_desc": "Interactive tables",
        "feat_export": "Export Results",
        "feat_export_desc": "Download as CSV",
        "feat_secure": "Secure",
        "feat_secure_desc": "SQL injection protection",
        
        # Chat
        "welcome_msg": "Welcome! 👋\n\nI'm your Hajj Data Assistant. Ask me anything about Hajj companies, locations, or authorization status!",
        "input_placeholder": "Ask your question here... 💬",
        "thinking": "🤔 Analyzing your question...",
        "searching": "🔍 Searching database...",
        "generating_sql": "🧠 Generating SQL query...",
        "executing_query": "💾 Executing query...",
        "found_results": "✅ Found {count} results",
        "sql_generated": "✅ SQL query generated",
        "query_failed": "❌ Query failed",
        
        # Results
        "results_badge": "📊 {count} Results",
        "columns_badge": "✅ {count} Columns",
        "authorized_badge": "🔒 {count} Authorized",
        "download_csv": "📥 Download Results (CSV)",
        "view_sql": "🔍 View SQL Query",
        "executed_caption": "Executed in database • {count} rows returned",
        
        # Messages
        "greeting": "Hello! 👋\n\nI'm doing great, thank you! I'm here to help you find information about Hajj companies. What would you like to know?",
        "no_results": "No results found. Try rephrasing the question or broadening the search.",
        "sql_error": "A database error occurred. Try rephrasing your question.",
        "intent_error": "⚠️ Intent detection issue",
        "general_error": "Sorry, I encountered an error.",
        "hint_rephrase": "💡 Try rephrasing your question or use different keywords",
        "no_sql": "Sorry, I couldn't convert that to a safe SQL query. Try rephrasing or ask for general results.",
        
        # Voice
        "voice_title": "🎤 Voice Assistant",
        "voice_instructions": "Click the microphone and speak your question",
        "voice_listening": "🎤 Listening... Speak now",
        "voice_processing": "🔄 Processing your voice...",
        "voice_success": "✅ Voice converted to text",
        "voice_error": "❌ Voice recognition failed",
        "voice_start": "🎤 Start Recording",
        "voice_stop": "⏹️ Stop Recording",
        "voice_back": "📝 Back to Text Chat",
    },
    "العربية": {
        # Header
        "page_title": "روبوت الحج",
        "main_title": "معلومات بيانات الحج الذكية",
        "subtitle": "اسأل عن شركات الحج حول العالم • مدعوم بالذكاء الاصطناعي • بيانات فورية",
        
        # Sidebar
        "assistant_title": "🕋 مساعد الحج",
        "assistant_subtitle": "دليلك الذكي المدعوم بالذكاء الاصطناعي",
        "language_title": "🌐 اللغة",
        "stats_title": "📊 الإحصائيات المباشرة",
        "examples_title": "💡 أمثلة سريعة",
        "clear_chat": "🧹 مسح سجل المحادثة",
        "features_title": "ℹ️ المميزات",
        
        # Stats
        "total_agencies": "إجمالي الشركات",
        "authorized": "المعتمدة",
        "countries": "الدول",
        "cities": "المدن",
        
        # Examples
        "ex_all_auth": "🔍 جميع الشركات المعتمدة",
        "ex_all_auth_q": "أظهر لي جميع شركات الحج المعتمدة",
        "ex_saudi": "🇸🇦 شركات في السعودية",
        "ex_saudi_q": "اعرض الشركات في المملكة العربية السعودية",
        "ex_by_country": "📊 الشركات حسب الدولة",
        "ex_by_country_q": "كم عدد الشركات في كل دولة؟",
        "ex_emails": "📧 شركات لديها بريد إلكتروني",
        "ex_emails_q": "ابحث عن الشركات التي لديها بريد إلكتروني",
        
        # Features
        "feat_ai": "بحث ذكي",
        "feat_ai_desc": "استعلامات باللغة الطبيعية",
        "feat_multilingual": "متعدد اللغات",
        "feat_multilingual_desc": "دعم العربية والإنجليزية",
        "feat_viz": "تصور البيانات",
        "feat_viz_desc": "جداول تفاعلية",
        "feat_export": "تصدير النتائج",
        "feat_export_desc": "تحميل بصيغة CSV",
        "feat_secure": "آمن",
        "feat_secure_desc": "حماية من هجمات SQL",
        
        # Chat
        "welcome_msg": "السلام عليكم ورحمة الله وبركاته! 🌙\n\nأهلاً بك في مساعد معلومات الحج الذكي. كيف يمكنني مساعدتك اليوم؟",
        "input_placeholder": "اكتب سؤالك هنا... 💬",
        "thinking": "🤔 جارٍ تحليل سؤالك...",
        "searching": "🔍 جارٍ البحث في قاعدة البيانات...",
        "generating_sql": "🧠 جارٍ إنشاء استعلام SQL...",
        "executing_query": "💾 جارٍ تنفيذ الاستعلام...",
        "found_results": "✅ تم العثور على {count} نتيجة",
        "sql_generated": "✅ تم إنشاء استعلام SQL",
        "query_failed": "❌ فشل الاستعلام",
        
        # Results
        "results_badge": "📊 {count} نتيجة",
        "columns_badge": "✅ {count} عمود",
        "authorized_badge": "🔒 {count} معتمدة",
        "download_csv": "📥 تحميل النتائج (CSV)",
        "view_sql": "🔍 عرض استعلام SQL",
        "executed_caption": "تم التنفيذ في قاعدة البيانات • {count} صف تم إرجاعه",
        
        # Messages
        "greeting": "وعليكم السلام ورحمة الله وبركاته! 🌙\n\nالحمد لله، أنا بخير! أنا هنا لمساعدتك في العثور على معلومات شركات الحج. كيف يمكنني مساعدتك؟",
        "no_results": "لم يتم العثور على نتائج. حاول إعادة صياغة السؤال أو توسيع نطاق البحث.",
        "sql_error": "حدث خطأ في قاعدة البيانات. حاول إعادة صياغة سؤالك.",
        "intent_error": "⚠️ مشكلة في اكتشاف النية",
        "general_error": "عذراً، واجهت مشكلة في الإجابة.",
        "hint_rephrase": "💡 حاول إعادة صياغة سؤالك أو استخدم كلمات مفتاحية مختلفة",
        "no_sql": "عذراً، لا يمكن تحويل هذا الطلب إلى استعلام SQL آمن. حاول إعادة صياغة السؤال.",
        
        # Voice
        "voice_title": "🎤 مساعد الصوت",
        "voice_instructions": "انقر على الميكروفون وتحدث بسؤالك",
        "voice_listening": "🎤 جاري الاستماع... تحدث الآن",
        "voice_processing": "🔄 جاري معالجة صوتك...",
        "voice_success": "✅ تم تحويل الصوت إلى نص",
        "voice_error": "❌ فشل التعرف على الصوت",
        "voice_start": "🎤 بدء التسجيل",
        "voice_stop": "⏹️ إيقاف التسجيل",
        "voice_back": "📝 العودة للدردشة النصية",
    }
}

def t(key: str, lang: str = "English", **kwargs) -> str:
    """Get translation for key in specified new_language with optional formatting"""
    text = TRANSLATIONS.get(lang, TRANSLATIONS["English"]).get(key, key)
    if kwargs:
        return text.format(**kwargs)
    return text

def get_current_time() -> float:
    """Get current timestamp in Riyadh timezone"""
    riyadh_tz = pytz.timezone('Asia/Riyadh')
    return datetime.now(riyadh_tz).timestamp()

def format_time(timestamp: float) -> str:
    """Format timestamp to readable time in Riyadh timezone"""
    riyadh_tz = pytz.timezone('Asia/Riyadh')
    dt = datetime.fromtimestamp(timestamp, riyadh_tz)
    return dt.strftime("%I:%M %p")

# -----------------------------
# Page Configuration
# -----------------------------
st.set_page_config(
    page_title="🕋 Hajj Chatbot",
    page_icon="🕋",
    layout="wide",
    initial_sidebar_state="expanded"
)

# -----------------------------
# Custom CSS
# -----------------------------
st.markdown("""
<style>
    .main {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        background-attachment: fixed;
    }
    
    .header-container {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
        border-radius: 20px;
        padding: 2rem;
        margin-bottom: 2rem;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        text-align: center;
    }
    
    .main-title {
        font-size: 3rem;
        font-weight: 700;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        margin: 0;
    }
    
    .chat-input-container {
        position: fixed;
        bottom: 20px;
        left: 50%;
        transform: translateX(-50%);
        width: 70%;
        background: white;
        border-radius: 25px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        display: flex;
        align-items: center;
        padding: 5px;
        z-index: 999;
    }
    
    .chat-input-container input {
        flex: 1;
        border: none;
        outline: none;
        padding: 12px 20px;
        border-radius: 25px;
        font-size: 16px;
    }
    
    .mic-button {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border: none;
        border-radius: 50%;
        width: 45px;
        height: 45px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        margin-left: 10px;
        font-size: 18px;
        transition: all 0.3s ease;
    }
    
    .mic-button:hover {
        transform: scale(1.1);
        box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
    }
    
    .mic-button.recording {
        background: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%);
        animation: pulse 1.5s infinite;
    }
    
    @keyframes pulse {
        0% { transform: scale(1); }
        50% { transform: scale(1.1); }
        100% { transform: scale(1); }
    }
    
    .voice-interface {
        background: rgba(255, 255, 255, 0.98);
        backdrop-filter: blur(10px);
        border-radius: 20px;
        padding: 3rem;
        margin: 2rem auto;
        max-width: 800px;
        box-shadow: 0 10px 40px rgba(0, 0, 0, 0.1);
        text-align: center;
    }
    
    .voice-visualizer {
        width: 200px;
        height: 200px;
        border-radius: 50%;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        margin: 2rem auto;
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;
        animation: voicePulse 1.5s ease-in-out infinite;
    }
    
    .voice-visualizer.recording {
        background: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%);
        animation: voicePulseRecording 0.8s ease-in-out infinite;
    }
    
    @keyframes voicePulse {
        0%, 100% {
            transform: scale(1);
            box-shadow: 0 0 0 0 rgba(102, 126, 234, 0.7);
        }
        50% {
            transform: scale(1.05);
            box-shadow: 0 0 0 20px rgba(102, 126, 234, 0);
        }
    }
    
    @keyframes voicePulseRecording {
        0%, 100% {
            transform: scale(1);
            box-shadow: 0 0 0 0 rgba(255, 107, 107, 0.7);
        }
        50% {
            transform: scale(1.1);
            box-shadow: 0 0 0 25px rgba(255, 107, 107, 0);
        }
    }
    
    .voice-text {
        font-size: 1.5rem;
        font-weight: 600;
        color: #333;
        margin: 1rem 0;
        min-height: 60px;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 1rem;
        background: rgba(102, 126, 234, 0.1);
        border-radius: 10px;
        border-left: 4px solid #667eea;
    }
</style>
""", unsafe_allow_html=True)

# -----------------------------
# Utility Functions
# -----------------------------
def sanitize_sql(sql_query: str) -> Optional[str]:
    """Reject dangerous queries and ensure SELECT only"""
    if not sql_query:
        return None
    dangerous = ['DROP', 'DELETE', 'INSERT', 'UPDATE', 'ALTER', 'CREATE', 'EXEC', 'EXECUTE', 'TRUNCATE']
    upper = sql_query.upper()
    for kw in dangerous:
        if kw in upper:
            return None
    if not sql_query.strip().upper().startswith("SELECT"):
        return None
    return sql_query.strip().rstrip(';')

def extract_sql_from_response(response_text: str) -> Optional[str]:
    """Extract SQL query from LLM response"""
    if not response_text:
        return None
    
    # Try code blocks first
    code_block_pattern = r'```(?:sql)?\s*(SELECT[\s\S]*?)```'
    match = re.search(code_block_pattern, response_text, re.IGNORECASE)
    if match:
        return match.group(1).strip().rstrip(';')
    
    # Try plain SELECT statement
    select_pattern = r'(SELECT\s+.*?(?:;|$))'
    match = re.search(select_pattern, response_text, re.IGNORECASE | re.DOTALL)
    if match:
        return match.group(1).strip().rstrip(';')
    
    if "NO_SQL" in response_text:
        return "NO_SQL"
    
    return None

# -----------------------------
# Database & OpenAI Setup
# -----------------------------
@st.cache_resource
def get_database_engine():
    """Initialize database engine"""
    try:
        return create_engine("sqlite:///hajj_companies.db")
    except Exception as e:
        st.error(f"❌ Database connection failed: {e}")
        st.stop()

engine = get_database_engine()

@st.cache_resource
def get_openai_client():
    """Initialize OpenAI client"""
    api_key = st.secrets.get("key", None)
    if not api_key:
        st.warning("⚠️ OpenAI API key missing in Streamlit secrets")
        st.stop()
    return OpenAI(api_key=api_key)

client = get_openai_client()

@st.cache_data(ttl=300)
def get_db_stats():
    """Fetch database statistics"""
    try:
        with engine.connect() as conn:
            return {
                'total': pd.read_sql(text("SELECT COUNT(*) as count FROM agencies"), conn).iloc[0]['count'],
                'authorized': pd.read_sql(text("SELECT COUNT(*) as count FROM agencies WHERE is_authorized = 'Yes'"), conn).iloc[0]['count'],
                'countries': pd.read_sql(text("SELECT COUNT(DISTINCT country) as count FROM agencies"), conn).iloc[0]['count'],
                'cities': pd.read_sql(text("SELECT COUNT(DISTINCT city) as count FROM agencies"), conn).iloc[0]['count']
            }
    except:
        return {'total': 0, 'authorized': 0, 'countries': 0, 'cities': 0}

# -----------------------------
# Session State Initialization
# -----------------------------
if "new_language" not in st.session_state:
    st.session_state.new_language = "English"
if "chat_memory" not in st.session_state:
    st.session_state.chat_memory = []
if "last_result_df" not in st.session_state:
    st.session_state.last_result_df = None
if "selected_question" not in st.session_state:
    st.session_state.selected_question = None
if "show_voice_interface" not in st.session_state:
    st.session_state.show_voice_interface = False
if "is_recording" not in st.session_state:
    st.session_state.is_recording = False
if "transcribed_text" not in st.session_state:
    st.session_state.transcribed_text = ""

# -----------------------------
# Sidebar
# -----------------------------
with st.sidebar:
    st.markdown(f"<h2 style='text-align: center; color: white; margin-bottom: 0;'>{t('assistant_title', st.session_state.new_language)}</h2>", unsafe_allow_html=True)
    st.markdown(f"<p style='text-align: center; color: rgba(255,255,255,0.7); font-size: 0.9rem;'>{t('assistant_subtitle', st.session_state.new_language)}</p>", unsafe_allow_html=True)
    st.markdown("---")

    # Language Toggle
    st.markdown(f"<h3>{t('language_title', st.session_state.new_language)}</h3>", unsafe_allow_html=True)
    language_choice = st.radio(
        "",
        ["English 🇬🇧", "العربية 🇸🇦"],
        index=0 if st.session_state.new_language == "English" else 1,
        horizontal=True,
        label_visibility="collapsed",
        key="lang_radio"
    )
    
    # Handle language change
    new_language = "العربية" if "العربية" in language_choice else "English"
    if new_language != st.session_state.new_language:
        st.session_state.new_language = new_language
        if len(st.session_state.chat_memory) == 0:
            st.session_state.chat_memory = [{
                "role": "assistant",
                "content": t("welcome_msg", st.session_state.new_language),
                "timestamp": get_current_time()
            }]
        st.rerun()

    st.markdown("---")
    
    # Database Statistics
    st.markdown(f"<h3>{t('stats_title', st.session_state.new_language)}</h3>", unsafe_allow_html=True)
    stats = get_db_stats()
    
    col1, col2 = st.columns(2)
    with col1:
        st.metric(t("total_agencies", st.session_state.new_language), f"{stats['total']:,}")
        st.metric(t("authorized", st.session_state.new_language), f"{stats['authorized']:,}")
    with col2:
        st.metric(t("countries", st.session_state.new_language), stats['countries'])
        st.metric(t("cities", st.session_state.new_language), stats['cities'])

    st.markdown("---")
    
    # Example Questions
    st.markdown(f"<h3>{t('examples_title', st.session_state.new_language)}</h3>", unsafe_allow_html=True)
    example_questions = [
        ("ex_all_auth", "ex_all_auth_q"),
        ("ex_saudi", "ex_saudi_q"),
        ("ex_by_country", "ex_by_country_q"),
        ("ex_emails", "ex_emails_q"),
    ]
    
    for i, (display_key, question_key) in enumerate(example_questions):
        if st.button(t(display_key, st.session_state.new_language), key=f"example_{i}", use_container_width=True):
            st.session_state.selected_question = t(question_key, st.session_state.new_language)

    st.markdown("---")
    
    # Clear Chat Button
    if st.button(t("clear_chat", st.session_state.new_language), use_container_width=True, type="primary"):
        st.session_state.chat_memory = [{
            "role": "assistant",
            "content": t("welcome_msg", st.session_state.new_language),
            "timestamp": get_current_time()
        }]
        st.session_state.last_result_df = None
        st.rerun()

# -----------------------------
# Main Header
# -----------------------------
st.markdown(f"""
<div class="header-container{' rtl' if st.session_state.new_language == 'العربية' else ''}">
    <h1>
        🕋 <span class="main-title">{t('main_title', st.session_state.new_language)}</span>
    </h1>
    <p class="subtitle">{t('subtitle', st.session_state.new_language)}</p>
</div>
""", unsafe_allow_html=True)

# -----------------------------
# Initialize Session State
# -----------------------------
if "chat_memory" not in st.session_state:
    st.session_state.chat_memory = [{
        "role": "assistant",
        "content": t("welcome_msg", st.session_state.new_language),
        "timestamp": get_current_time()
    }]

# -----------------------------
# Display Chat History
# -----------------------------
for idx, msg in enumerate(st.session_state.chat_memory):
    role = msg.get("role", "assistant")
    avatar = "🕋" if role == "assistant" else "👤"
    with st.chat_message(role, avatar=avatar):
        st.markdown(msg.get("content", ""))
        if msg.get("timestamp"):
            st.markdown(
                f"<div style='color: #999; font-size: 0.85rem; margin-top: 0.5rem;'>🕐 {datetime.fromtimestamp(msg['timestamp']).strftime('%I:%M %p')}</div>",
                unsafe_allow_html=True
            )

        if "dataframe" in msg and msg["dataframe"] is not None:
            df = msg["dataframe"]
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("Results", len(df))
            with col2:
                st.metric("Columns", len(df.columns))
            with col3:
                if "is_authorized" in df.columns:
                    auth_count = len(df[df["is_authorized"] == "Yes"])
                    st.metric("Authorized", auth_count)

            st.dataframe(df, use_container_width=True, height=300)

            csv = df.to_csv(index=False).encode("utf-8")
            st.download_button(
                label="📥 Download CSV",
                data=csv,
                file_name=f"hajj_data_{int(msg['timestamp'])}.csv",
                mime="text/csv",
                key=f"download_{idx}"
            )

# -----------------------------
# Voice Recording JavaScript
# -----------------------------
voice_js = """
<script>
class VoiceRecorder {
    constructor() {
        this.mediaRecorder = null;
        this.audioChunks = [];
        this.isRecording = false;
    }

    async startRecording() {
        try {
            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
            this.mediaRecorder = new MediaRecorder(stream);
            this.audioChunks = [];
            
            this.mediaRecorder.ondataavailable = (event) => {
                this.audioChunks.push(event.data);
            };
            
            this.mediaRecorder.onstop = () => {
                const audioBlob = new Blob(this.audioChunks, { type: 'audio/wav' });
                this.sendAudioToServer(audioBlob);
            };
            
            this.mediaRecorder.start();
            this.isRecording = true;
            return true;
        } catch (error) {
            console.error('Error starting recording:', error);
            return false;
        }
    }

    stopRecording() {
        if (this.mediaRecorder && this.isRecording) {
            this.mediaRecorder.stop();
            this.isRecording = false;
            
            // Stop all audio tracks
            this.mediaRecorder.stream.getTracks().forEach(track => track.stop());
        }
    }

    sendAudioToServer(audioBlob) {
        const formData = new FormData();
        formData.append('audio', audioBlob, 'recording.wav');
        
        // Send to Streamlit
        const xhr = new XMLHttpRequest();
        xhr.open('POST', window.location.href, true);
        xhr.onload = function() {
            if (xhr.status === 200) {
                window.location.reload();
            }
        };
        xhr.send(formData);
    }
}

// Initialize voice recorder
window.voiceRecorder = new VoiceRecorder();

// Handle recording buttons
function startRecording() {
    const success = window.voiceRecorder.startRecording();
    if (success) {
        document.getElementById('recording-status').innerText = '🎤 Listening... Speak now';
        document.getElementById('voice-visualizer').classList.add('recording');
        document.getElementById('start-record').style.display = 'none';
        document.getElementById('stop-record').style.display = 'block';
    }
}

function stopRecording() {
    window.voiceRecorder.stopRecording();
    document.getElementById('recording-status').innerText = '🔄 Processing your voice...';
    document.getElementById('voice-visualizer').classList.remove('recording');
    document.getElementById('start-record').style.display = 'block';
    document.getElementById('stop-record').style.display = 'none';
}
</script>
"""

# -----------------------------
# Voice Interface
# -----------------------------
if st.session_state.show_voice_interface:
    # Inject JavaScript
    st.components.v1.html(voice_js, height=0)
    
    st.markdown("<div class='voice-interface'>", unsafe_allow_html=True)
    
    # Back button
    if st.button("← " + t("voice_back", st.session_state.new_language), key="back_button"):
        st.session_state.show_voice_interface = False
        st.rerun()
    
    st.markdown(f"<h2 style='color: #667eea; margin-bottom: 1rem;'>{t('voice_title', st.session_state.new_language)}</h2>", unsafe_allow_html=True)
    
    # Voice visualizer
    visualizer_class = "voice-visualizer recording" if st.session_state.is_recording else "voice-visualizer"
    st.markdown(f"""
    <div id="voice-visualizer" class="{visualizer_class}">
        <div style='font-size: 4rem;'>🎤</div>
    </div>
    """, unsafe_allow_html=True)
    
    # Recording status
    status_text = t("voice_listening", st.session_state.new_language) if st.session_state.is_recording else t("voice_instructions", st.session_state.new_language)
    st.markdown(f"<div id='recording-status' class='voice-text'>{status_text}</div>", unsafe_allow_html=True)
    
    # Show transcribed text if available
    if st.session_state.transcribed_text:
        st.success(f"🎯 {t('voice_success', st.session_state.new_language)}: {st.session_state.transcribed_text}")
        
        # Process the transcribed text
        if st.button("🔍 Search with this text", type="primary", use_container_width=True):
            st.session_state.selected_question = st.session_state.transcribed_text
            st.session_state.show_voice_interface = False
            st.session_state.transcribed_text = ""
            st.rerun()
    
    # Recording controls
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        if not st.session_state.is_recording:
            if st.button("🎤 " + t("voice_start", st.session_state.new_language), 
                        key="start-record", use_container_width=True, type="primary"):
                st.session_state.is_recording = True
                st.rerun()
        else:
            if st.button("⏹️ " + t("voice_stop", st.session_state.new_language), 
                        key="stop-record", use_container_width=True):
                st.session_state.is_recording = False
                # Simulate voice processing (in real app, this would use actual speech-to-text)
                st.session_state.transcribed_text = "Show me authorized Hajj companies in Mecca"
                st.rerun()
    
    st.markdown("</div>", unsafe_allow_html=True)

else:
    # -----------------------------
    # Main Chat Interface
    # -----------------------------
    
    # Custom chat input with microphone
    st.markdown("""
    <div class='chat-input-container'>
        <div style='flex: 1;'>
    """, unsafe_allow_html=True)
    
    # Chat input
    user_input = st.chat_input(
        t("input_placeholder", st.session_state.new_language),
        key="chat_input"
    )
    
    st.markdown("</div>", unsafe_allow_html=True)
    
    # Microphone button
    st.markdown("""
        <div style='margin-left: 10px;'>
    """, unsafe_allow_html=True)
    
    if st.button("🎤", key="mic_button", help="Voice input"):
        st.session_state.show_voice_interface = True
        st.rerun()
    
    st.markdown("</div></div>", unsafe_allow_html=True)

    # Process user input
    if user_input or st.session_state.selected_question:
        question = st.session_state.selected_question if st.session_state.selected_question else user_input
        st.session_state.selected_question = None

        # Add user message to chat
        st.session_state.chat_memory.append({
            "role": "user",
            "content": question,
            "timestamp": get_current_time()
        })

        # Display user message immediately
        with st.chat_message("user", avatar="👤"):
            st.markdown(question)
            st.markdown(f"<div style='color: #999; font-size: 0.85rem; margin-top: 0.5rem;'>🕐 {format_time(get_current_time())}</div>", unsafe_allow_html=True)

        # Process the question
        with st.chat_message("assistant", avatar="🕋"):
            with st.spinner(t("thinking", st.session_state.new_language)):
                try:
                    # Generate SQL query using OpenAI
                    prompt = f"""
                    Generate a SQL query for this question about Hajj companies: "{question}"
                    
                    Database table: agencies
                    Columns: id, company_name, country, city, is_authorized, email, phone, address
                    
                    Return ONLY the SQL query, no explanations.
                    Use SELECT statements only.
                    Include LIMIT 100 if no specific limit is mentioned.
                    """
                    
                    response = client.chat.completions.create(
                        model="gpt-3.5-turbo",
                        messages=[
                            {"role": "system", "content": "You are a SQL query generator. Return only SQL queries."},
                            {"role": "user", "content": prompt}
                        ],
                        temperature=0.1,
                        max_tokens=200
                    )
                    
                    sql_query = extract_sql_from_response(response.choices[0].message.content)
                    
                    if not sql_query or sql_query == "NO_SQL":
                        # Fallback queries
                        if "authorized" in question.lower():
                            sql_query = "SELECT * FROM agencies WHERE is_authorized = 'Yes' LIMIT 100"
                        elif "saudi" in question.lower() or "ksa" in question.lower():
                            sql_query = "SELECT * FROM agencies WHERE country LIKE '%Saudi%' LIMIT 100"
                        else:
                            sql_query = "SELECT * FROM agencies LIMIT 100"
                    
                    # Sanitize and execute query
                    safe_sql = sanitize_sql(sql_query)
                    if safe_sql:
                        try:
                            with engine.connect() as conn:
                                df = pd.read_sql(text(safe_sql), conn)
                            
                            if df.empty:
                                st.markdown(t("no_results", st.session_state.new_language))
                            else:
                                st.markdown(f"**{t('found_results', st.session_state.new_language, count=len(df))}**")
                                
                                # Display results
                                col1, col2, col3 = st.columns(3)
                                with col1:
                                    st.metric("Results", len(df))
                                with col2:
                                    st.metric("Columns", len(df.columns))
                                with col3:
                                    if "is_authorized" in df.columns:
                                        auth_count = len(df[df["is_authorized"] == "Yes"])
                                        st.metric("Authorized", auth_count)

                                st.dataframe(df, use_container_width=True, height=300)
                                
                                # Download button
                                csv = df.to_csv(index=False).encode("utf-8")
                                st.download_button(
                                    label="📥 Download CSV",
                                    data=csv,
                                    file_name=f"hajj_data_{int(datetime.now().timestamp())}.csv",
                                    mime="text/csv"
                                )
                                
                                # Store in session state
                                st.session_state.last_result_df = df
                                st.session_state.chat_memory.append({
                                    "role": "assistant",
                                    "content": t("found_results", st.session_state.new_language, count=len(df)),
                                    "dataframe": df,
                                    "timestamp": get_current_time()
                                })
                        
                        except Exception as db_error:
                            st.markdown(f"❌ {t('query_failed', st.session_state.new_language)}")
                            st.markdown(f"`{str(db_error)}`")
                    else:
                        st.markdown(t("no_sql", st.session_state.new_language))
                
                except Exception as e:
                    st.markdown(f"❌ {t('general_error', st.session_state.new_language)}")
                    st.markdown(f"`{str(e)}`")

        st.rerun()
